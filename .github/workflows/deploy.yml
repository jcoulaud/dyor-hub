name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of the current environment'
        required: false
        default: false
        type: boolean

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            apps/api/dist
            apps/web/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build packages
        run: |
          cd packages/types
          pnpm build

      - name: Build API and Web in parallel
        run: |
          cd apps/api && pnpm build &
          cd apps/web && pnpm build &
          wait

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa,ed25519 ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Copy deployment script
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          scp scripts/blue-green-deploy.sh $DEPLOY_USER@$DROPLET_IP:/tmp/blue-green-deploy.sh

      - name: Smart Cleanup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "=== Smart cleanup to prevent disk bloat ==="
            
            # Remove stopped containers older than 24h
            docker container prune -f --filter "until=24h"
            
            # Remove dangling images (not used by any container)
            docker image prune -f
            
            # Remove unused volumes older than 7 days
            docker volume prune -f --filter "until=168h"
            
            # Clean old log files
            find /var/log -type f -name "*.gz" -delete 2>/dev/null || true
            
            # Clean apt cache only if disk usage is above 80%
            if [ $(df -h / | awk 'NR==2 {print $5}' | sed 's/%//') -gt 80 ]; then
              apt-get clean -y 2>/dev/null || true
            fi

      - name: Verify Nginx Configuration
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          ssh $DEPLOY_USER@$DROPLET_IP "sudo test -f /etc/nginx/sites-enabled/dyor-hub && sudo nginx -t" || {
            echo "Nginx configuration issue detected. Please check manually."
            exit 1
          }

      - name: Deploy to DigitalOcean
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          APP_DIR: /var/www/dyor-hub
          GITHUB_REPO: ${{ github.repository }}
          FORCE_REBUILD: ${{ github.event.inputs.force_rebuild || 'false' }}
        run: |
          echo "Starting blue-green deployment - Note: The site will remain available during deployment"
          echo "This is a zero-downtime deployment, but you might temporarily see a 'Deploying' message"
          ssh $DEPLOY_USER@$DROPLET_IP "chmod +x /tmp/blue-green-deploy.sh && sudo GITHUB_REPO=$GITHUB_REPO APP_DIR=$APP_DIR FORCE_REBUILD=$FORCE_REBUILD /tmp/blue-green-deploy.sh"
          echo "Deployment command executed successfully"

      - name: Wait for services to stabilize
        run: |
          echo "Waiting for services to stabilize (60 seconds)..."
          sleep 60

      - name: Verify Deployment
        if: always()
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          APP_DIR: /var/www/dyor-hub
        run: |
          echo "Checking container status..."
          ssh $DEPLOY_USER@$DROPLET_IP "docker ps -a"

          echo "Determining active environment..."
          ACTIVE_ENV=$(ssh $DEPLOY_USER@$DROPLET_IP "grep -l '3100' /etc/nginx/sites-enabled/dyor-hub >/dev/null && echo 'blue' || echo 'green'")
          echo "Active environment is: $ACTIVE_ENV"

          echo "Checking if containers are running..."
          if ! ssh $DEPLOY_USER@$DROPLET_IP "docker ps | grep 'dyor-hub-$ACTIVE_ENV'"; then
            echo "ERROR: No containers for the active environment ($ACTIVE_ENV) are running!"
            
            echo "Trying to start the containers..."
            ssh $DEPLOY_USER@$DROPLET_IP "cd $APP_DIR && docker-compose -f docker-compose.$ACTIVE_ENV.yml up -d || true"
            sleep 20
            
            if ! ssh $DEPLOY_USER@$DROPLET_IP "docker ps | grep 'dyor-hub-$ACTIVE_ENV'"; then
              echo "ERROR: Still no running containers after restart attempt!"
              
              echo "Getting deployment logs..."
              ssh $DEPLOY_USER@$DROPLET_IP "cd $APP_DIR && cat /tmp/deployment.log 2>/dev/null || echo 'No deployment log file found'"
              
              echo "Checking Docker logs for containers..."
              ssh $DEPLOY_USER@$DROPLET_IP "docker logs dyor-hub-$ACTIVE_ENV-web 2>&1 || echo 'No web container logs available'"
              ssh $DEPLOY_USER@$DROPLET_IP "docker logs dyor-hub-$ACTIVE_ENV-api 2>&1 || echo 'No API container logs available'"
              
              exit 1
            else
              echo "Containers successfully restarted!"
            fi
          fi

          echo "Checking if the web service is responding..."
          MAX_RETRIES=5
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://dyorhub.xyz/)
            echo "Response code: $RESPONSE_CODE"
            
            if [[ "$RESPONSE_CODE" == "200" ]]; then
              echo "Website is responding successfully!"
              break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Retrying in 10 seconds... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 10
            fi
          done

          if [[ "$RESPONSE_CODE" != "200" ]]; then
            echo "ERROR: Website not responding with 200 status after $MAX_RETRIES attempts!"
            echo "Checking Nginx configuration and logs..."
            ssh $DEPLOY_USER@$DROPLET_IP "sudo nginx -t && sudo cat /var/log/nginx/error.log | tail -50"
            exit 1
          fi

          echo "Deployment verification successful!"

      - name: Post Deployment to Discord
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const commit = context.payload.head_commit;
            const sender = context.payload.sender;
            const environment = 'Production';

            const message = {
              embeds: [{
                title: `ðŸš€ Deployment Successful`,
                description: `A new version has been deployed to ${environment}`,
                color: 0x00ff00,
                fields: [
                  {
                    name: 'Commit Message',
                    value: commit.message,
                    inline: false
                  },
                  {
                    name: 'Deployed By',
                    value: sender.login,
                    inline: true
                  }
                ],
                timestamp: new Date().toISOString()
              }]
            };

            await fetch(process.env.DISCORD_WEBHOOK_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(message)
            });
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
