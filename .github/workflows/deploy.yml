name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build in pnpm container
        uses: docker://guerreiro/pnpm
        with:
          args: |
            sh -c "pnpm install --frozen-lockfile && \
            cd packages/types && pnpm build && \
            cd ../../apps/web && pnpm build && \
            cd ../api && pnpm build"
        timeout-minutes: 15

      - name: Verify build artifacts
        run: |
          if [ ! -d "apps/web/.next" ] || [ ! -d "apps/api/dist" ]; then
            echo "ERROR: Build artifacts not found"
            exit 1
          fi

      - name: Copy built artifacts
        run: |
          CONTAINER_ID=$(docker ps -q -f ancestor=guerreiro/pnpm)
          if [ -z "$CONTAINER_ID" ]; then
            echo "ERROR: Build container not found"
            exit 1
          fi
          docker cp $CONTAINER_ID:/app/apps/web/.next ./apps/web/
          docker cp $CONTAINER_ID:/app/apps/api/dist ./apps/api/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa,ed25519 ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          if ! ssh $DEPLOY_USER@$DROPLET_IP "echo 'SSH connection successful'"; then
            echo "ERROR: Failed to connect to droplet"
            exit 1
          fi

      - name: Check droplet prerequisites
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          APP_DIR: /var/www/dyor-hub
        run: |
          # Check if docker-compose exists
          if ! ssh $DEPLOY_USER@$DROPLET_IP "which docker-compose"; then
            echo "ERROR: docker-compose not found on droplet"
            exit 1
          fi

          # Check if docker daemon is running
          if ! ssh $DEPLOY_USER@$DROPLET_IP "docker info >/dev/null 2>&1"; then
            echo "ERROR: Docker daemon not running on droplet"
            exit 1
          fi

          # Check if nginx is installed
          if ! ssh $DEPLOY_USER@$DROPLET_IP "which nginx"; then
            echo "ERROR: nginx not found on droplet"
            exit 1
          fi

          # Check if app directory exists
          if ! ssh $DEPLOY_USER@$DROPLET_IP "[ -d '$APP_DIR' ]"; then
            echo "ERROR: App directory $APP_DIR not found on droplet"
            exit 1
          fi

      - name: Copy deployment script
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          if ! scp scripts/blue-green-deploy.sh $DEPLOY_USER@$DROPLET_IP:/tmp/blue-green-deploy.sh; then
            echo "ERROR: Failed to copy deployment script"
            exit 1
          fi

      - name: Copy built artifacts to droplet
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_ID: ${{ github.sha }}
        run: |
          # Create temp directory on droplet
          ssh $DEPLOY_USER@$DROPLET_IP "mkdir -p /var/www/dyor-hub/temp/$DEPLOY_ID"
          
          # Copy to temp directory
          if ! scp -r apps/web/.next $DEPLOY_USER@$DROPLET_IP:/var/www/dyor-hub/temp/$DEPLOY_ID/web/; then
            echo "ERROR: Failed to copy web artifacts"
            exit 1
          fi
          if ! scp -r apps/api/dist $DEPLOY_USER@$DROPLET_IP:/var/www/dyor-hub/temp/$DEPLOY_ID/api/; then
            echo "ERROR: Failed to copy api artifacts"
            exit 1
          fi

          # Verify copied files
          if ! ssh $DEPLOY_USER@$DROPLET_IP "[ -d '/var/www/dyor-hub/temp/$DEPLOY_ID/web/.next' ] && [ -d '/var/www/dyor-hub/temp/$DEPLOY_ID/api/dist' ]"; then
            echo "ERROR: Artifacts not found on droplet"
            exit 1
          fi

      - name: Deploy
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          APP_DIR: /var/www/dyor-hub
          GITHUB_REPO: ${{ github.repository }}
          DEPLOY_ID: ${{ github.sha }}
        run: |
          echo "Starting blue-green deployment - Note: The site will remain available during deployment"
          echo "This is a zero-downtime deployment, but you might temporarily see a 'Deploying' message"
          if ! ssh $DEPLOY_USER@$DROPLET_IP "chmod +x /tmp/blue-green-deploy.sh && sudo GITHUB_REPO=$GITHUB_REPO APP_DIR=$APP_DIR DEPLOY_ID=$DEPLOY_ID /tmp/blue-green-deploy.sh"; then
            echo "ERROR: Deployment failed"
            exit 1
          fi

      - name: Verify Deployment
        if: always()
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          APP_DIR: /var/www/dyor-hub
        run: |
          echo "Checking container status..."
          ssh $DEPLOY_USER@$DROPLET_IP "docker ps -a"

          echo "Determining active environment..."
          ACTIVE_ENV=$(ssh $DEPLOY_USER@$DROPLET_IP "grep -l '3100' /etc/nginx/sites-enabled/dyor-hub >/dev/null && echo 'blue' || echo 'green'")
          echo "Active environment is: $ACTIVE_ENV"

          echo "Checking if containers are running..."
          if ! ssh $DEPLOY_USER@$DROPLET_IP "docker ps | grep 'dyor-hub-$ACTIVE_ENV'"; then
            echo "ERROR: No containers for the active environment ($ACTIVE_ENV) are running!"
            
            echo "Trying to start the containers..."
            ssh $DEPLOY_USER@$DROPLET_IP "cd $APP_DIR && docker-compose -f docker-compose.$ACTIVE_ENV.yml up -d || true"
            sleep 20
            
            if ! ssh $DEPLOY_USER@$DROPLET_IP "docker ps | grep 'dyor-hub-$ACTIVE_ENV'"; then
              echo "ERROR: Still no running containers after restart attempt!"
              
              echo "Getting deployment logs..."
              ssh $DEPLOY_USER@$DROPLET_IP "cd $APP_DIR && cat /tmp/deployment.log 2>/dev/null || echo 'No deployment log file found'"
              
              echo "Checking Docker logs for containers..."
              ssh $DEPLOY_USER@$DROPLET_IP "docker logs dyor-hub-$ACTIVE_ENV-web 2>&1 || echo 'No web container logs available'"
              ssh $DEPLOY_USER@$DROPLET_IP "docker logs dyor-hub-$ACTIVE_ENV-api 2>&1 || echo 'No API container logs available'"
              
              exit 1
            else
              echo "Containers successfully restarted!"
            fi
          fi

          echo "Checking if the web service is responding..."
          MAX_RETRIES=5
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://dyorhub.xyz/)
            echo "Response code: $RESPONSE_CODE"
            
            if [[ "$RESPONSE_CODE" == "200" ]]; then
              echo "Website is responding successfully!"
              break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Retrying in 10 seconds... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 10
            fi
          done

          if [[ "$RESPONSE_CODE" != "200" ]]; then
            echo "ERROR: Website not responding with 200 status after $MAX_RETRIES attempts!"
            echo "Checking Nginx configuration and logs..."
            ssh $DEPLOY_USER@$DROPLET_IP "sudo nginx -t && sudo cat /var/log/nginx/error.log | tail -50"
            exit 1
          fi

          echo "Deployment verification successful!"

      - name: Post Deployment to Discord
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const commit = context.payload.head_commit;
              const sender = context.payload.sender;
              const environment = 'Production';

              const message = {
                embeds: [{
                  title: `ðŸš€ Deployment Successful`,
                  description: `A new version has been deployed to ${environment}`,
                  color: 0x00ff00,
                  fields: [
                    {
                      name: 'Commit Message',
                      value: commit.message,
                      inline: false
                    },
                    {
                      name: 'Deployed By',
                      value: sender.login,
                      inline: true
                    }
                  ],
                  timestamp: new Date().toISOString()
                }]
              };

              const response = await fetch(process.env.DISCORD_WEBHOOK_URL, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(message)
              });

              if (!response.ok) {
                throw new Error(`Discord webhook failed: ${response.statusText}`);
              }
            } catch (error) {
              console.error('Failed to send Discord notification:', error);
              // Don't fail the workflow for Discord notification failure
            }
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Cleanup old deployments
        if: success()
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_ID: ${{ github.sha }}
        run: |
          # Keep current and previous deployment, remove others
          ssh $DEPLOY_USER@$DROPLET_IP "cd /var/www/dyor-hub/temp && ls -t | tail -n +3 | xargs -r rm -rf"

      - name: Cleanup failed deployments
        if: failure()
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_ID: ${{ github.sha }}
        run: |
          # Remove failed deployment
          ssh $DEPLOY_USER@$DROPLET_IP "rm -rf /var/www/dyor-hub/temp/$DEPLOY_ID"

      - name: Cleanup local artifacts
        if: always()
        run: |
          rm -rf apps/web/.next apps/api/dist
